// Demonstration of structs with methods
import stdio::*

struct Point:
  x f64 = 0.    // optional default value
  y f64 = 0.
  
  // Calculate length of point
  // 'fn' inside a type are methods. self is default first parameter.
  fn len() f64:
    _lensq().sqrt // _lensq() is equivalent to self._lensq() ; sqrt comes from C runtime library.
  
  // Calculate distance between two points
  fn distance(pt2) f64:
    (self - pt2).len

  // Subtract two points
  // A `-` method implements the binary subtract ('-') operator
  fn `-`(pt2) Point:
    Point[pt2.x - x, pt2.y - y]

  // Unary operator: use - only on self - Overloading
  fn `-`() Point:
    Point[-x, -y]

  // A `()` operator allows an object to be called like a function
  // This is useful for implementing objects as closures
  fn `()`() f64:
    x             // shorthand for: self.x

  // A private method, as name begins with an underscore
  fn _lensq() f64:
    x*x + y*y

fn main():
  mut pt1 = Point[3d, 0d]    
  mut pt2 = Point[0d, 4d]

  print <- pt1(), "\n" // => 3 - Invoke the `()` method on pt1
  print <- -pt1.x, "\n" // => -3  // - Invoke the `-` method on pt1
  print <- -pt1.y, "\n" // => -0 
  
  // pt1._lensq   // Illegal, as _lensq is a private method
  
  print <- "Distance is: ", (pt1 - pt2).len, "\n" // => Distance is: 5
  print <- "Distance is: ", pt1.distance(pt2), "\n" // => Distance is: 5

  imm from = Point[x: 1d, y: 1d]
  imm to   = Point[x: 4d, y: 5d]
  imm dist = from.distance(to)     
  print <- dist, "\n"     // => 5